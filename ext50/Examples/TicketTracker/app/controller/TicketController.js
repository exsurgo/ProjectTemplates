/*
 * File: app/controller/TicketController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TicketTracker.controller.TicketController', {
    extend: 'Ext.app.Controller',

    refs: {
        ticketDataView: 'ticketpanel ticketdataview',
        ticketFormPanel: 'ticketformwindow ticketform',
        ticketFormWindow: 'ticketformwindow'
    },

    control: {
        "ticketpanel ticketdataview": {
            itemclick: 'onDataviewItemClick',
            itemcontextmenu: 'onDataviewItemContextMenu'
        },
        "ticketpanel button[action='sortByImportance']": {
            click: 'onSortByImportanceButtonClick'
        },
        "ticketpanel combo[name='status']": {
            change: 'onComboboxChange'
        },
        "ticketpanel button[action='clearFilter']": {
            click: 'onClearFilterButtonClick'
        },
        "ticketpanel button[action='addTicket']": {
            click: 'onAddButtonClick'
        },
        "ticketformwindow button[action='saveTicket']": {
            click: 'onSaveButtonClick'
        }
    },

    onDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
        var win = this.getTicketFormWindow();
        if(!win){
            win = Ext.create('widget.ticketformwindow');
        }
        win.show();
        this.getTicketFormPanel().loadRecord(record);
    },

    onSortByImportanceButtonClick: function(button, e, eOpts) {
        this.getTicketDataView().getStore().sort('importance', 'DESC');
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        this.getTicketDataView().getStore().clearFilter();
        this.getTicketDataView().getStore().filter('importance', newValue);
    },

    onClearFilterButtonClick: function(button, e, eOpts) {
        this.getTicketDataView().getStore().clearFilter();
    },

    onAddButtonClick: function(button, e, eOpts) {
        var win = this.getTicketFormWindow();
        if(!win){
            win = Ext.create('widget.ticketformwindow');
        }
        this.getTicketFormPanel().loadRecord(Ext.create('model.ticket'));
        this.adding = true;
        win.show();
    },

    onSaveButtonClick: function(button, e, eOpts) {
        var form = this.getTicketFormPanel();
        var selectedRecord = form.getRecord();
        if (this.adding) {
            this.adding = undefined;
            this.getTicketDataView().getStore().add(selectedRecord);
        }
        selectedRecord.set(form.getValues());
        this.getTicketDataView().getStore().filter();
        this.getTicketFormWindow().close();
    },

    onDataviewItemContextMenu: function(dataview, record, item, index, e, eOpts) {
        e.stopEvent();

        if (!this.ctxMenu) {
            this.ctxMenu = Ext.create('Ext.menu.Menu', {
                items:[{
                    text: 'Delete Ticket'
                }],
                defaults: {
                    listeners: {
                        click: function(item) {
                            this.getTicketDataView().getStore().remove([record]);
                            this.getTicketDataView().getStore().filter();
                        },
                        scope: this
                    }
                }
            });
        }

        this.ctxMenu.showAt(e.getXY());
    }

});

/*
 * File: app/view/MainViewport.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MainViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.mainviewport',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    title: 'Reddit Posts',
                    store: 'redditHomepage',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return '<strong><a target="_blank" href="'+record.get('url')+'">' + value + '</a></strong>';
                            },
                            width: 456,
                            defaultWidth: 300,
                            dataIndex: 'title',
                            text: 'Title'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return '<a target="_blank" href="http://reddit.com/r/'+value+'">'+value+'</a>';
                            },
                            dataIndex: 'subreddit',
                            text: 'Subreddit'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var points = record.data.ups - record.data.downs;
                                return points + " (<span class='ups'>"+record.data.ups+"</span>/<span class='downs'>"+record.data.downs+"</span>)";
                            },
                            width: 200,
                            defaultWidth: 200,
                            text: 'Points'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'is_self',
                            text: 'Is_self'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            dataIndex: 'permalink',
                            text: 'Permalink'
                        },
                        {
                            xtype: 'gridcolumn',
                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return '<a href="http://reddit.com/u/'+value+'">'+value+'</a>';
                            },
                            width: 200,
                            defaultWidth: 200,
                            dataIndex: 'author',
                            text: 'Author'
                        }
                    ],
                    tools: [
                        {
                            xtype: 'tool',
                            itemId: 'settingsTool',
                            type: 'gear'
                        },
                        {
                            xtype: 'tool',
                            type: 'refresh',
                            listeners: {
                                click: {
                                    fn: me.onToolClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onToolClick: function(tool, e, eOpts) {
        Ext.getStore('redditHomepage').reload();
    }

});